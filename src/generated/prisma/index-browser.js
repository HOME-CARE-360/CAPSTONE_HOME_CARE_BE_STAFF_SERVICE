
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  providerId: 'providerId',
  status: 'status',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  staffId: 'staffId',
  serviceRequestId: 'serviceRequestId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  parentCategoryId: 'parentCategoryId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deletedById: 'deletedById',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryTranslationScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  languageId: 'languageId',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  sender: 'sender',
  message: 'message',
  sentAt: 'sentAt',
  isRead: 'isRead'
};

exports.Prisma.CustomerProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userAgent: 'userAgent',
  ip: 'ip',
  lastActive: 'lastActive',
  createdAt: 'createdAt',
  isActive: 'isActive',
  fcmToken: 'fcmToken'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  content: 'content',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.PackageRecommendationScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  packageId: 'packageId',
  reason: 'reason',
  accepted: 'accepted',
  recommendedAt: 'recommendedAt',
  acceptedAt: 'acceptedAt'
};

exports.Prisma.PaymentTransactionScalarFieldEnum = {
  id: 'id',
  gateway: 'gateway',
  transactionDate: 'transactionDate',
  accountNumber: 'accountNumber',
  subAccount: 'subAccount',
  amountIn: 'amountIn',
  amountOut: 'amountOut',
  accumulated: 'accumulated',
  referenceNumber: 'referenceNumber',
  transactionContent: 'transactionContent',
  body: 'body',
  createdAt: 'createdAt',
  serviceRequestId: 'serviceRequestId',
  status: 'status',
  userId: 'userId'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  path: 'path',
  method: 'method',
  module: 'module',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deletedById: 'deletedById',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecurringBookingScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  serviceId: 'serviceId',
  interval: 'interval',
  nextRunDate: 'nextRunDate',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  deviceId: 'deviceId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  staffId: 'staffId',
  serviceId: 'serviceId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.RewardPointScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  points: 'points',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deletedById: 'deletedById',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  basePrice: 'basePrice',
  virtualPrice: 'virtualPrice',
  images: 'images',
  durationMinutes: 'durationMinutes',
  providerId: 'providerId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deletedById: 'deletedById',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  publishedAt: 'publishedAt',
  description: 'description',
  categoryId: 'categoryId',
  unit: 'unit',
  status: 'status'
};

exports.Prisma.ServiceProviderScalarFieldEnum = {
  id: 'id',
  description: 'description',
  address: 'address',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  companyType: 'companyType',
  industry: 'industry',
  licenseNo: 'licenseNo',
  logo: 'logo',
  taxId: 'taxId',
  verificationStatus: 'verificationStatus',
  verifiedAt: 'verifiedAt',
  verifiedById: 'verifiedById'
};

exports.Prisma.ServiceProviderTranslationScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  languageId: 'languageId',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  providerId: 'providerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.StaffCategoryScalarFieldEnum = {
  staffId: 'staffId',
  categoryId: 'categoryId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  amount: 'amount',
  status: 'status',
  method: 'method',
  paidAt: 'paidAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deletedById: 'deletedById',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  orderCode: 'orderCode'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  avatar: 'avatar',
  totpSecret: 'totpSecret',
  status: 'status',
  createdById: 'createdById',
  updatedById: 'updatedById',
  deletedById: 'deletedById',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationCodeScalarFieldEnum = {
  id: 'id',
  email: 'email',
  code: 'code',
  type: 'type',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.WorkLogScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  bookingId: 'bookingId',
  checkIn: 'checkIn',
  checkOut: 'checkOut',
  note: 'note',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InspectionReportScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  staffId: 'staffId',
  estimatedTime: 'estimatedTime',
  note: 'note',
  images: 'images',
  createdAt: 'createdAt'
};

exports.Prisma.ServiceItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  unitPrice: 'unitPrice',
  warrantyPeriod: 'warrantyPeriod',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt',
  updatedAt: 'updatedAt',
  brand: 'brand',
  description: 'description',
  isActive: 'isActive',
  model: 'model',
  stockQuantity: 'stockQuantity',
  unit: 'unit',
  providerId: 'providerId'
};

exports.Prisma.ServiceRequestScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  providerId: 'providerId',
  note: 'note',
  preferredDate: 'preferredDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  location: 'location',
  phoneNumber: 'phoneNumber',
  categoryId: 'categoryId'
};

exports.Prisma.Service_ServiceItemsScalarFieldEnum = {
  serviceId: 'serviceId',
  serviceItemId: 'serviceItemId'
};

exports.Prisma.ProposalScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  notes: 'notes',
  createdAt: 'createdAt',
  status: 'status'
};

exports.Prisma.ProposalItemScalarFieldEnum = {
  id: 'id',
  proposalId: 'proposalId',
  serviceId: 'serviceId',
  quantity: 'quantity',
  createdAt: 'createdAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  accountHolder: 'accountHolder',
  bankAccount: 'bankAccount',
  bankName: 'bankName'
};

exports.Prisma.WithdrawalRequestScalarFieldEnum = {
  id: 'id',
  providerId: 'providerId',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  processedAt: 'processedAt',
  processedById: 'processedById',
  note: 'note'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER'
};

exports.PaymentTransactionStatus = exports.$Enums.PaymentTransactionStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  EXPIRED: 'EXPIRED',
  MANUAL_REVIEW: 'MANUAL_REVIEW'
};

exports.HTTPMethod = exports.$Enums.HTTPMethod = {
  GET: 'GET',
  POST: 'POST',
  PUT: 'PUT',
  DELETE: 'DELETE',
  PATCH: 'PATCH',
  OPTIONS: 'OPTIONS',
  HEAD: 'HEAD'
};

exports.Unit = exports.$Enums.Unit = {
  PER_HOUR: 'PER_HOUR',
  PER_ITEM: 'PER_ITEM',
  PER_SQUARE_METER: 'PER_SQUARE_METER',
  PER_JOB: 'PER_JOB'
};

exports.ServiceStatus = exports.$Enums.ServiceStatus = {
  PENDING: 'PENDING',
  REJECTED: 'REJECTED',
  ACCEPTED: 'ACCEPTED'
};

exports.CompanyType = exports.$Enums.CompanyType = {
  SOLE_PROPRIETORSHIP: 'SOLE_PROPRIETORSHIP',
  LIMITED_LIABILITY: 'LIMITED_LIABILITY',
  JOINT_STOCK: 'JOINT_STOCK',
  PARTNERSHIP: 'PARTNERSHIP',
  OTHER: 'OTHER'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CREDIT_CARD: 'CREDIT_CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  MOMO: 'MOMO',
  ZALOPAY: 'ZALOPAY'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  BLOCKED: 'BLOCKED'
};

exports.VerificationCodeType = exports.$Enums.VerificationCodeType = {
  REGISTER: 'REGISTER',
  FORGOT_PASSWORD: 'FORGOT_PASSWORD',
  LOGIN: 'LOGIN',
  DISABLE_2FA: 'DISABLE_2FA'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  ESTIMATED: 'ESTIMATED',
  CANCELLED: 'CANCELLED'
};

exports.ProposalStatus = exports.$Enums.ProposalStatus = {
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  PENDING: 'PENDING'
};

exports.WithdrawalStatus = exports.$Enums.WithdrawalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.Prisma.ModelName = {
  Booking: 'Booking',
  Category: 'Category',
  CategoryTranslation: 'CategoryTranslation',
  ChatMessage: 'ChatMessage',
  CustomerProfile: 'CustomerProfile',
  Device: 'Device',
  Notification: 'Notification',
  PackageRecommendation: 'PackageRecommendation',
  PaymentTransaction: 'PaymentTransaction',
  Permission: 'Permission',
  RecurringBooking: 'RecurringBooking',
  RefreshToken: 'RefreshToken',
  Review: 'Review',
  RewardPoint: 'RewardPoint',
  Role: 'Role',
  Service: 'Service',
  ServiceProvider: 'ServiceProvider',
  ServiceProviderTranslation: 'ServiceProviderTranslation',
  Staff: 'Staff',
  StaffCategory: 'StaffCategory',
  Transaction: 'Transaction',
  User: 'User',
  VerificationCode: 'VerificationCode',
  WorkLog: 'WorkLog',
  InspectionReport: 'InspectionReport',
  ServiceItem: 'ServiceItem',
  ServiceRequest: 'ServiceRequest',
  Service_ServiceItems: 'Service_ServiceItems',
  Proposal: 'Proposal',
  ProposalItem: 'ProposalItem',
  Wallet: 'Wallet',
  WithdrawalRequest: 'WithdrawalRequest'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
